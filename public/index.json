[
{
	"uri": "http://localhost:1313/12-s3-bucket-for-data-storage/12.1-navigate-to-s3-console/",
	"title": "Navigate to S3 Console",
	"tags": [],
	"description": "",
	"content": "Access the S3 Service To begin creating your S3 bucket, you need to navigate to the S3 service within the AWS Management Console.\nNavigate to S3 Console Go to the AWS Management Console and search for S3 in the services search bar. Click on S3 to access the Simple Storage Service console. Start Bucket Creation Once you\u0026rsquo;re in the S3 console:\nClick Create bucket to start the bucket creation process. This will open the bucket configuration page where you can specify your bucket settings. Result You are now ready to configure your S3 bucket settings in the next step.\n"
},
{
	"uri": "http://localhost:1313/",
	"title": "Setting up an AWS account",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview In this first lab, you will be creating your new AWS account and use Multi-factor Authentication (MFA) to improve your account security. Next, you will create an Administrator Group and Admin User to manage access to resources in your account instead of using the root user. Finally, we will step through account authentication with AWS Support in the event you experience authentication problems.\nAWS Account An AWS account is the basic container for all the AWS resources you can create as an AWS customer. By default, each AWS account will have a root user. The root user has full access within your AWS account, and root user permissions cannot be limited. When you first create your AWS account, you will be assessing it as the root user.\nAs a best practice, do not use the AWS account root user for any task where it\u0026rsquo;s not required. Instead, create a new IAM user for each person that requires administrator access. Thereafter, the users in the administrators user group should set up the user groups, users, and so on, for the AWS account. All future interaction should be through the AWS account\u0026rsquo;s users and their own keys instead of the root user. However, to perform some account and service management tasks, you must log in using the root user credentials.\nMulti-Factor Authentication (MFA) MFA adds extra security because it requires users to provide unique authentication from an AWS supported MFA mechanism in addition to their regular sign-in credentials when they access AWS websites or services.\nIAM User Group An IAM user group is a collection of IAM users. User groups let you specify permissions for multiple users, which can make it easier to manage the permissions for those users. Any user in that user group automatically has the permissions that are assigned to the user group.\nIAM User An IAM user is an entity that you create in AWS to represent the person or application that uses it to interact with AWS. A user in AWS consists of a name and credentials. Please note that an IAM user with administrator permissions is not the same thing as the AWS account root user.\nAWS Support AWS Basic Support offers all AWS customers access to our Resource Center, Service Health Dashboard, Product FAQs, Discussion Forums, and Support for Health Checks – at no additional charge. Customers who desire a deeper level of support can subscribe to AWS Support at the Developer, Business, or Enterprise level.\nCustomers who choose AWS Support gain one-on-one, fast-response support from AWS engineers. The service helps customers use AWS\u0026rsquo;s products and features. With pay-by-the-month pricing and unlimited support cases, customers are freed from long-term commitments. Customers with operational issues or technical questions can contact a team of support engineers and receive predictable response times and personalized support.\nMain Content Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication "
},
{
	"uri": "http://localhost:1313/3-create-admin-user-and-group/3.1-legacy-way/",
	"title": "Setting up AWS Bedrock (Legacy)",
	"tags": [],
	"description": "",
	"content": "Content Start up the IAM Identity Center (If you already have a profile, attach the AmplifyBackendDeployFullAccess managed policy to your IAM user)\nOpen AWS Console to access IAM Identity Center and choose Enable.\nAfterward, a pop up will open, select Enable with AWS Organizations and choose Continue.\nAnd the basics for IAM Identity Center is ready.\nUsing CloudShell to set up the management We will now using CloudShell to connect our mail account as the main profile for the project.\nOpen CloudShell terminal within the website and paste this line of code, then enter your email address after the prompt.\nread -p \u0026#34;Enter email address: \u0026#34; user_email # hit enter Afterward, copy and paste the following command, it will show a warning due to the multiline nature, but just keep pasting anyway.\nresponse=$(aws sso-admin list-instances) ssoId=$(echo $response | jq \u0026#39;.Instances[0].IdentityStoreId\u0026#39; -r) ssoArn=$(echo $response | jq \u0026#39;.Instances[0].InstanceArn\u0026#39; -r) email_json=$(jq -n --arg email \u0026#34;$user_email\u0026#34; \u0026#39;{\u0026#34;Type\u0026#34;:\u0026#34;Work\u0026#34;,\u0026#34;Value\u0026#34;:$email}\u0026#39;) response=$(aws identitystore create-user --identity-store-id $ssoId --user-name amplify-admin --display-name \u0026#39;Amplify Admin\u0026#39; --name Formatted=string,FamilyName=Admin,GivenName=Amplify --emails \u0026#34;$email_json\u0026#34;) userId=$(echo $response | jq \u0026#39;.UserId\u0026#39; -r) response=$(aws sso-admin create-permission-set --name amplify-policy --instance-arn=$ssoArn --session-duration PT12H) permissionSetArn=$(echo $response | jq \u0026#39;.PermissionSet.PermissionSetArn\u0026#39; -r) aws sso-admin attach-managed-policy-to-permission-set --instance-arn $ssoArn --permission-set-arn $permissionSetArn --managed-policy-arn arn:aws:iam::aws:policy/service-role/AmplifyBackendDeployFullAccess accountId=$(aws sts get-caller-identity | jq \u0026#39;.Account\u0026#39; -r) aws sso-admin create-account-assignment --instance-arn $ssoArn --target-id $accountId --target-type AWS_ACCOUNT --permission-set-arn $permissionSetArn --principal-type USER --principal-id $userId Hit enter and wait.\nTo validate that this worked, run the following command in the CloudShell:\nprintf \u0026#34;\\n\\nStart session url: https://$ssoId.awsapps.com/start\\nRegion: $AWS_REGION\\nUsername: amplify-admin\\n\\n\u0026#34; You should see something like:\nStart session url: https://d-XXXXXXXXXX.awsapps.com/start\nRegion: Username: amplify-admin\nFinish the setup for AWS IAM Identity Center Now create a password for the user that we need for the next step. In the IAM Identity Center console, navigate to Users→amplify-admin.\nOnce you have clicked on the user, you will see a pop-up telling you to verify the email address. You click on that:\nCheck your email, you should get a notification from the AWS to verify your email.\nNext, you will be changing the password of your account. Once again, navigate to Users→amplify-admin. There, you will see an option to Reset Password, click on it.\nUpon clicking on it, choose Reset Password and wait for a few moments.\nCheck your email frequently, you should recieve a mail that look like this:\nFollow the steps that is provided, you will need to create a new password and a MFA. Once you are finished, head back to the IAM Identity Center, you will be given an AWS Access Portal URL.\nYou will see a sign-in screen, sign in using the earlier account, password, MFA, and you are good to go.\n"
},
{
	"uri": "http://localhost:1313/2-mfa-setup-for-aws-user-root/1-virtual-mfa-device/",
	"title": "Setting Up the IAM Identity Center",
	"tags": [],
	"description": "",
	"content": "Content Start up the IAM Identity Center Using CloudShell to set up the management Finish the setup for AWS IAM Identity Center Start up the IAM Identity Center (If you already have a profile, attach the AmplifyBackendDeployFullAccess managed policy to your IAM user)\nOpen AWS Console to access IAM Identity Center and choose Enable.\nAfterward, a pop up will open, select Enable with AWS Organizations and choose Continue.\nAnd the basics for IAM Identity Center is ready.\nUsing CloudShell to set up the management We will now using CloudShell to connect our mail account as the main profile for the project.\nOpen CloudShell terminal within the website and paste this line of code, then enter your email address after the prompt.\nread -p \u0026#34;Enter email address: \u0026#34; user_email # hit enter Afterward, copy and paste the following command, it will show a warning due to the multiline nature, but just keep pasting anyway.\nresponse=$(aws sso-admin list-instances) ssoId=$(echo $response | jq \u0026#39;.Instances[0].IdentityStoreId\u0026#39; -r) ssoArn=$(echo $response | jq \u0026#39;.Instances[0].InstanceArn\u0026#39; -r) email_json=$(jq -n --arg email \u0026#34;$user_email\u0026#34; \u0026#39;{\u0026#34;Type\u0026#34;:\u0026#34;Work\u0026#34;,\u0026#34;Value\u0026#34;:$email}\u0026#39;) response=$(aws identitystore create-user --identity-store-id $ssoId --user-name amplify-admin --display-name \u0026#39;Amplify Admin\u0026#39; --name Formatted=string,FamilyName=Admin,GivenName=Amplify --emails \u0026#34;$email_json\u0026#34;) userId=$(echo $response | jq \u0026#39;.UserId\u0026#39; -r) response=$(aws sso-admin create-permission-set --name amplify-policy --instance-arn=$ssoArn --session-duration PT12H) permissionSetArn=$(echo $response | jq \u0026#39;.PermissionSet.PermissionSetArn\u0026#39; -r) aws sso-admin attach-managed-policy-to-permission-set --instance-arn $ssoArn --permission-set-arn $permissionSetArn --managed-policy-arn arn:aws:iam::aws:policy/service-role/AmplifyBackendDeployFullAccess accountId=$(aws sts get-caller-identity | jq \u0026#39;.Account\u0026#39; -r) aws sso-admin create-account-assignment --instance-arn $ssoArn --target-id $accountId --target-type AWS_ACCOUNT --permission-set-arn $permissionSetArn --principal-type USER --principal-id $userId Hit enter and wait.\nTo validate that this worked, run the following command in the CloudShell:\nprintf \u0026#34;\\n\\nStart session url: https://$ssoId.awsapps.com/start\\nRegion: $AWS_REGION\\nUsername: amplify-admin\\n\\n\u0026#34; You should see something like:\nStart session url: https://d-XXXXXXXXXX.awsapps.com/start\nRegion: Username: amplify-admin\nFinish the setup for AWS IAM Identity Center Now create a password for the user that we need for the next step. In the IAM Identity Center console, navigate to Users→amplify-admin.\nOnce you have clicked on the user, you will see a pop-up telling you to verify the email address. You click on that:\nCheck your email, you should get a notification from the AWS to verify your email.\nNext, you will be changing the password of your account. Once again, navigate to Users→amplify-admin. There, you will see an option to Reset Password, click on it.\nUpon clicking on it, choose Reset Password and wait for a few moments.\nCheck your email frequently, you should recieve a mail that look like this:\nFollow the steps that is provided, you will need to create a new password and a MFA. Once you are finished, head back to the IAM Identity Center, you will be given an AWS Access Portal URL.\nYou will see a sign-in screen, sign in using the earlier account, password, MFA, and you are good to go.\n"
},
{
	"uri": "http://localhost:1313/1-create-new-aws-account/",
	"title": "Setting Up the template for the Workshop",
	"tags": [],
	"description": "",
	"content": "Content:\nSetting up Vite Setting up Git and push to Github Setting Up Amplify into the project Setting Up Vite If you have installed Node Package Manager, then create the project using Vite. After setting up the Vite Website, start the development site. Test around to see if the website is stable. Setting up Git and push to Github When you have finished setting up Vite, install Git so you can import on GitHub.\nOnce you have installed Git, commit the workshop you have made up on Github.\nDo remember to save the progress once in a while. Setting Up Amplify into the project Intialize AWS Amplify in the project by using npm. Update the file directory, this file will contain all the configurations. Remember to commit into GitHub. "
},
{
	"uri": "http://localhost:1313/1-create-new-aws-account/1.1-find-account-id/",
	"title": "Setting Up Vite",
	"tags": [],
	"description": "",
	"content": "Set Up The Vite, React and TypeScript To kick off the development environment, we initialized the project with Vite, a next-generation frontend tooling system that offers fast build times and hot module replacement (HMR). We selected the React + TypeScript template to simplify development with type safety and modern React features.\nCreate the project using Vite Create a new project by making a new folder and direct to it inside the Visual Studio Code. After the folder is created, use this command:\nnpm create vite@latest leftover -- --template react-ts -y This command scaffolds a new Vite project named leftover with the React + TypeScript template.\nNavigate and run the development template Navigate towards the folder that you just created with this command.\ncd leftover Then, to run the program after being set up.\nnpm run dev Result Once the server is running, the development version of the application becomes accessible at: http://localhost:5173\nThe successful launch displays a default welcome screen with the Vite + React logo, a counter button, and instructions to test hot module replacement by editing the src/App.tsx file.\n"
},
{
	"uri": "http://localhost:1313/12-s3-bucket-for-data-storage/12.2-configure-bucket-settings/",
	"title": "Configure Bucket Settings",
	"tags": [],
	"description": "",
	"content": "Basic Configuration Settings Configure the essential settings for your S3 bucket to ensure proper functionality and security.\nSet Bucket Name and Region Configure the following basic settings:\nBucket name: leftover-storage\nMust be globally unique across all AWS accounts Use lowercase letters, numbers, and hyphens only Region: ap-southeast-1 (Singapore)\nChoose the same region as your Amplify app for optimal performance If \u0026ldquo;leftover-storage\u0026rdquo; is already taken, append a unique identifier like your initials or numbers (e.g., \u0026ldquo;leftover-storage-abc123\u0026rdquo;).\nSecurity Configuration Block Public Access Settings:\nKeep all four settings checked to ensure your data remains private This prevents accidental public exposure of your bucket contents Advanced Features Bucket Versioning:\nEnable versioning for data integrity and recovery capabilities Default Encryption:\nEnable with SSE-S3 (Server-Side Encryption with Amazon S3-Managed Keys) This ensures all objects stored in the bucket are automatically encrypted Result Your bucket configuration is now complete and ready for creation in the next step.\n"
},
{
	"uri": "http://localhost:1313/2-mfa-setup-for-aws-user-root/2-u2f-security-key/",
	"title": "Deploy the Application via AWS Amplify",
	"tags": [],
	"description": "",
	"content": "Content\nConnecting AWS Amplify with GitHub Editing the YML File Visit the Deployed URL Connecting AWS Amplify with GitHub After initializing Amplify in the project, the application was deployed using AWS Amplify’s hosting feature, which supports seamless integration with GitHub for CI/CD.\nYou will open the AWS Console by navigating to the AWS Amplify service, and click on Deploy an App or Create New App.\nOn the “Start building with Amplify” page, choose GitHub as the source provider. Log in and authorize GitHub access if prompted.\nRemember to check the branch/repository of the GitHub repository you used to store the data.\nEditing the YML File At the app setting part, you will need to edit the YML file. Put all the info just like the screenshot under and click on Edit YML file.\nInside the YML file, paste the following code:\nModify the amplify.yml file as follows: version: 1 backend: phases: preBuild: commands: - npm install build: commands: - nvm use 20 - npm ci --cache .npm --prefer-offline - npx ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID frontend: phases: build: commands: - npm run build artifacts: baseDirectory: dist files: - \u0026#39;**/*\u0026#39; cache: paths: - node_modules/**/* THE COMMAND LINES MUST BE INDENTED CORRECTLY JUST LIKE THE INSTRUCTIONS.\nAfter finished editing the YML file, save and then scroll down to next.\nClick on Finish and Deploy, this will create an AWS Amplify Console that will match your liking.\nReturn to the Overview, click the Production branch, and then select Redeploy this version. Wait for the build process to complete. Once deployed, the app will be accessible at the generated domain link provided in the main branch overview.\nIn case of the yml file being wrong somewhere, you can come back to the file by choosing Hosting then Build Settings.\nVisit the Deployed URL Then, you can visit the page by clicking Visit Deployed URL.\nYou should see the result that looks like this.\n"
},
{
	"uri": "http://localhost:1313/3-create-admin-user-and-group/3.2-cross-region/",
	"title": "Deploy the Application via AWS Amplify",
	"tags": [],
	"description": "",
	"content": "Content\nConnecting AWS Amplify with GitHub Editing the YML File Visit the Deployed URL Connecting AWS Amplify with GitHub After initializing Amplify in the project, the application was deployed using AWS Amplify’s hosting feature, which supports seamless integration with GitHub for CI/CD.\nYou will open the AWS Console by navigating to the AWS Amplify service, and click on Deploy an App or Create New App.\nOn the “Start building with Amplify” page, choose GitHub as the source provider. Log in and authorize GitHub access if prompted.\nRemember to check the branch/repository of the GitHub repository you used to store the data.\nEditing the YML File At the app setting part, you will need to edit the YML file. Put all the info just like the screenshot under and click on Edit YML file.\nInside the YML file, paste the following code:\nModify the amplify.yml file as follows: version: 1 backend: phases: preBuild: commands: - npm install build: commands: - nvm use 20 - npm ci --cache .npm --prefer-offline - npx ampx pipeline-deploy --branch $AWS_BRANCH --app-id $AWS_APP_ID frontend: phases: build: commands: - npm run build artifacts: baseDirectory: dist files: - \u0026#39;**/*\u0026#39; cache: paths: - node_modules/**/* THE COMMAND LINES MUST BE INDENTED CORRECTLY JUST LIKE THE INSTRUCTIONS.\nAfter finished editing the YML file, save and then scroll down to next.\nClick on Finish and Deploy, this will create an AWS Amplify Console that will match your liking.\nReturn to the Overview, click the Production branch, and then select Redeploy this version. Wait for the build process to complete. Once deployed, the app will be accessible at the generated domain link provided in the main branch overview.\nIn case of the yml file being wrong somewhere, you can come back to the file by choosing Hosting then Build Settings.\nVisit the Deployed URL Then, you can visit the page by clicking Visit Deployed URL.\nYou should see the result that looks like this.\n"
},
{
	"uri": "http://localhost:1313/1-create-new-aws-account/1.2-update-account/",
	"title": "Initialize Git and Push Project to GitHub",
	"tags": [],
	"description": "",
	"content": "Setting up Git and Push After setting up the local Vite + React + TypeScript project, the next step was to version control the project and push it to a remote GitHub repository named AWS-leftover.\nCreate a GitHub respository for the workshop We will need to publish our Workshop so that the services on AWS such as Amplify can access, henceforth, a GitHub account is necessary. Prepare yourself a GitHub account. Once you are ready, in your profile, click on New.\nName the respository as leftover.\nOnce you are finished with the creation, you should see the link that will connect you to your project.\nNote: Do remember that your GitHub link is private and it should only come from your GitHub profile, so we have to censor it for security and privacy reasons.\nIntialize Git into the project. Minimum Permissions: To proceed with the following steps, you will need to follow these steps:\nFirst, open up a new bash terminal and direct Git towards the project root directory:\ngit init Then, select all the files that you want to update to your repository. In this case, it will be:\ngit add . You will need to create an intial commit as well.\ngit commit -m \u0026#34;first commit\u0026#34; You will need to link your local repository to Github after that:\ngit remote add origin https://github.com/*\u0026lt;your-username\u0026gt;*/leftover.git Replace with your actual GitHub username.\nThen, you will set the branch to main.\ngit branch -M main Finally, you will need to push the project up to Github.\ngit push -u origin main Once completed, the project is hosted remotely and can be accessed, shared, or collaborated on via GitHub.\nNote: \u0026ldquo;git add .\u0026rdquo;, \u0026ldquo;git commit -m\u0026rdquo; and \u0026ldquo;git push\u0026rdquo; will be your way to save and publish your progress onto the repository.\nResult The screenshot below shows the successfully initialized GitHub repository with the project directory and supporting files committed.\n"
},
{
	"uri": "http://localhost:1313/2-mfa-setup-for-aws-user-root/",
	"title": "Working on the main Functionality of the project using AWS Services",
	"tags": [],
	"description": "",
	"content": "Content Content Setting Up the IAM Identity Center Deploy the Application via AWS Amplify Setting up the Frontend, Backend and AWS Sandbox Setting Up the IAM Identity Center In order to manage multiple accounts with Single-sign on (SSO) session, users, groups, permission sets, and more for your organization, you have to set up the IAM Identity Center.\nOpen AWS Console to access IAM Identity Center and enable the process.\nOpen CloudShell and set up the management for the AWS Services using your root email as the main profile for the project.\nConfigure the account by changing the password and finish setting up the new account and signing in.\nDeploy the Application via AWS Amplify After initializing Amplify and enabling IAM Identity Center in the project, the application was deployed using AWS Amplify’s hosting feature, which supports seamless integration.\nConnect and Deploy AWS Amplify with the Repository from your GitHub.\nEdit the Build specification in the Amplify file.\nSave and Redeploy the App.\nSetting up the Frontend, Backend and AWS Sandbox You will need to set up the frontend, back and the aws sandbox following these steps.\nFrontend and Backend Install the libraries necessary using npm inside the local repository for AWS Amplify and update the following files:l-2-ways\nsrc/index.css (For Frontend) src/App.css (For Frontend) src/main.tsx (For UI) src/App.tsx (For UI) Set up the resources file for Amplify Data by creating the file:\namplify/data/resource.ts Amplify Sandbox Using npm to install Amplify Sandbox.\nAfter setting up, you will need to configure a profile inside the sandbox.\nConfigure and make a localhost.\n"
},
{
	"uri": "http://localhost:1313/12-s3-bucket-for-data-storage/12.3-create-the-bucket/",
	"title": "Create the Bucket",
	"tags": [],
	"description": "",
	"content": "Review and Create After configuring all the necessary settings, it\u0026rsquo;s time to review and create your S3 bucket.\nFinal Review Before creating the bucket:\nReview all your configuration settings to ensure they match the requirements: Bucket name: leftover-storage Region: ap-southeast-1 Public access: Blocked Versioning: Enabled Encryption: SSE-S3 enabled Create the Bucket Scroll down to the bottom of the configuration page. Click Create bucket to finalize the creation process. Successful Creation Once the bucket is created successfully:\nYou will see a confirmation message indicating the bucket was created. Your new S3 bucket will appear in the S3 console bucket list. Result Your S3 bucket leftover-storage is now ready to store your application data securely with:\nVersioning enabled for data integrity Public access blocked for security Default encryption for data protection The bucket is now ready to integrate with your application for secure data storage.\n"
},
{
	"uri": "http://localhost:1313/3-create-admin-user-and-group/",
	"title": "Creating and Developing Amazon Bedrock",
	"tags": [],
	"description": "",
	"content": "Content Setting up AWS Bedrock Model (2 Ways) Request Amazon Bedrock models You will be using Bedrock Model and setting up using Claude Sonnet.\nThere will be two ways to build the Bedrock Model based on how you intepret.\nImplementing the servers using manual coding for a fallback server. Using cross-region to make a fallback server. Legacy Way Go to Amazon Bedrock and get for yourself the AI Model. In this case, it should be Claude Sonnet 2.5\nChange AWS region to another region that is suitable → repeat Step 1 to enable Claude 3.5 Sonnet in that region. This provides a backup model in case of failure or latency.\nIn Amplify backend:\nModify backend.ts to add two data sources: one for primary and one for fallback with correct PolicyStatement.\nCreate bedrock.js under amplify/data → handle request/response logic for model invocation with fallback logic.\nUpdate resource.ts to define askBedrock and askBedrockFallback GraphQL queries, attach to the right data source, and configure authentication.\nCross-Region Way To ensure high availability and performance, you can configure Claude models to work across AWS regions using cross-region inference profiles.\nGo to Amazon Bedrock and select a Claude Sonnet 4 → click Next and confirm access.\nClick Cross-region inference beside the model → copy the Inference profile ID and Model ID for each region you want to support.\nIn backend.ts, configure both Cross-Region and Fallback endpoints using addHttpDataSource() and grant model access with the correct ARN.\nIn bedrock.js, use the modelId dynamically in resourcePath, and define max_tokens, temperature, and other parameters as needed.\n"
},
{
	"uri": "http://localhost:1313/1-create-new-aws-account/1.3-aws-account-alias/",
	"title": "Setting Up Amplify For The Project",
	"tags": [],
	"description": "",
	"content": "Intializing Amplify in the project First, you will need to use the npm command:\nnpm create amplify@latest -y This command sets up a minimal Amplify project, preparing the application for AWS resource integration.\nProject Structure Update and Version Control Reminder Upon successful execution, an amplify/ directory is generated in the root folder of the project. This directory contains all configurations and backend environment settings related to Amplify.\nAfter this change, remember to commit and push the updates to the GitHub repository:\ngit add . git commit -m \u0026#34;Add AWS Amplify setup\u0026#34; git push Results The screenshot below highlights the newly added amplify folder in the project directory, confirming successful initialization.\n"
},
{
	"uri": "http://localhost:1313/2-mfa-setup-for-aws-user-root/3-other-hardware-mfa-device/",
	"title": "Setting up the Frontend, Backend and AWS Sandbox",
	"tags": [],
	"description": "",
	"content": "Content\nEnable other hardware MFA device through the Console Coding the Frontend In the terminal window, navigate to leftover folder and run this command to install the libraries:\nnpm install aws-amplify @aws-amplify/ui-react Open index.css file in src folder and update it with the following code to center the App UI:\n:root { font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif; line-height: 1.5; font-weight: 400; color: rgba(255, 255, 255, 0.87); font-synthesis: none; text-rendering: optimizeLegibility; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; max-width: 1280px; margin: 0 auto; padding: 2rem; } .card { padding: 2em; } .read-the-docs { color: #888; } .box:nth-child(3n + 1) { grid-column: 1; } .box:nth-child(3n + 2) { grid-column: 2; } .box:nth-child(3n + 3) { grid-column: 3; } Then update the App.css which is also in the same src folder with:\n.app-container { margin: 0 auto; padding: 20px; text-align: center; } .header-container { padding-bottom: 2.5rem; margin: auto; text-align: center; max-width: 48rem; } .main-header { font-size: 2.25rem; font-weight: bold; color: #1a202c; } .main-header .highlight { color: #2563eb; } @media (min-width: 640px) { .main-header { font-size: 3.75rem; } } .description { font-weight: 500; font-size: 1.125rem; max-width: 65ch; color: #1a202c; } Coding the Backend Update main.tsx file in src folder with these codes to allow users to sign up, sign in, reset their password, and confirm sign-in for MFA with the Amplify Authenticator component:\nimport React from \u0026#34;react\u0026#34;; import ReactDOM from \u0026#34;react-dom/client\u0026#34;; import App from \u0026#34;./App.jsx\u0026#34;; import \u0026#34;./index.css\u0026#34;; import { Authenticator } from \u0026#34;@aws-amplify/ui-react\u0026#34;; ReactDOM.createRoot(document.getElementById(\u0026#34;root\u0026#34;)!).render( \u0026lt;React.StrictMode\u0026gt; \u0026lt;Authenticator\u0026gt; \u0026lt;App /\u0026gt; \u0026lt;/Authenticator\u0026gt; \u0026lt;/React.StrictMode\u0026gt; ); In the same src folder, implement a simple UI for the App.tsx:\nimport { FormEvent, useState } from \u0026#34;react\u0026#34;; import { Loader, Placeholder } from \u0026#34;@aws-amplify/ui-react\u0026#34;; import \u0026#34;./App.css\u0026#34;; import { Amplify } from \u0026#34;aws-amplify\u0026#34;; import outputs from \u0026#34;../amplify_outputs.json\u0026#34;; import \u0026#34;@aws-amplify/ui-react/styles.css\u0026#34;; Amplify.configure(outputs); function App() { return ( \u0026lt;div className=\u0026#34;app-container\u0026#34;\u0026gt; \u0026lt;div className=\u0026#34;header-container\u0026#34;\u0026gt; \u0026lt;h1 className=\u0026#34;main-header\u0026#34;\u0026gt; This here is \u0026lt;br /\u0026gt; \u0026lt;span className=\u0026#34;highlight\u0026#34;\u0026gt;just a website\u0026lt;/span\u0026gt; \u0026lt;/h1\u0026gt; \u0026lt;p className=\u0026#34;description\u0026#34;\u0026gt; You can develop your own website and deploy it to AWS Amplify. \u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; ); } export default App; Lastly, setup Amplify Data by create a resource.ts file in amplify/data folder and update it with following code:\nimport { type ClientSchema, a, defineData } from \u0026#34;@aws-amplify/backend\u0026#34;; const schema = a.schema({ // Empty schema but properly formatted }); export type Schema = ClientSchema\u0026lt;typeof schema\u0026gt;; export const data = defineData({ schema, authorizationModes: { defaultAuthorizationMode: \u0026#34;apiKey\u0026#34;, apiKeyAuthorizationMode: { expiresInDays: 30, }, }, }); Setup AWS Sandbox By using Amplify Sandbox, developers can rapidly integrate the website within an isolated development environment, while still able to use AWS services and features. In order to do that, run open a new terminal window, navigate to workshop2 directory and run the following command:\nnpx ampx sandbox Once the cloud sandbox has been fully deployed, your terminal will display a confirmation message and the amplify_outputs.json file will be generated and added to your project.\n→If it says InvalidCredentialError: Failed to load default AWS credentials it means you need to configure your profile, in order to do that, type:\naws configure You can find the necessary information in the logged in session of your amplify-admin account by logging into the AWS Identity Center. Log into the Center and you will be able to find your code here.\nSo, once you click into the keys, you will be able to see the 3 options. Based on the operation you are running, choose the suitable one. In my case, it will be Windows.\nYou will be seeing the SSO and every info necessary for your SSO registration.\nRedo:\naws configure As for SSO session name and Profile name, please leave it at amplify-default. You can leave the SSO registration scopes and CLI default output format as blank.\nAfterward, type in:\naws configure sso You should see this in response:\nYou shall see the link. Click on it, and click on Allow Access.\nYou shall be greeted with this message.\nThen, in order to use your newly created profile, type in: npx ampx sandbox –profile amplify-default (or whatever your profile name is) The terminal will output this line “[Sandbox] Watching for file changes…” when success.\n→If it says SSMCredentialsError: UnrecognizedClientException: The security token included in the request is invalid, it might be due to a conflict amplify accounts, in order to fix this problem, navigate to C:\\Users\\YourUserName.aws and delete everything in there then start configure your profile as demonstrated above.\nFinally, to check the sso, you can use these commands.\naws sts get-caller-identity --profile amplify-1 npm ampx sandbox --profile amplify-1 When you’re done with setting up the sandbox environment, run:\nnpm run dev to initialize a localhost for your website, you can then get access to the website locally at locahost:5173.\nAfterwards, sign up and sign in using your account normally. Remember to verify your account as well.\nThe result should be:\n"
},
{
	"uri": "http://localhost:1313/4-verify-new-account/",
	"title": "Account Authentication Support",
	"tags": [],
	"description": "",
	"content": "Content:\nCheck the information Create a support case with AWS Support During the AWS account creation process, at the contact phone number verification step, sometimes there will be a situation where no SMS or calls from AWS will be received. In that case, follow these steps to complete the account information verification:\nCheck the information First, double-check your account information and make sure it\u0026rsquo;s entered correctly:\nYou have entered the phone number information and selected the correct international area code to receive the call. If you use a mobile phone, check your phone to make sure you are still within range to receive calls. Payment method information has been entered correctly. Make sure that the phone number you provide in your AWS account is reachable.\nCreate a support case with AWS Support After checking that the information is correct but still has not received the verification call, AWS Support will assist you to activate your account manually.\nGo to the AWS Support console, select Create case. Select Account and billing support and enter the support information: Type: select Account. Category: select Activation. Subject: briefly write down your situation (eg Did not receive an SMS message or call for verification) Description: Provide details of the situation encountered and information about the time you need support to activate the account. Attachments: Attach an image describing the authentication step you are facing. Under Contact options, select Chat under Contact methods. Select Submit. 5. The AWS Support team will contact and assist in activating your account.\nYou can create a support request with AWS Support even if your account is not activated.\n"
},
{
	"uri": "http://localhost:1313/12-s3-bucket-for-data-storage/",
	"title": "Creating S3 Bucket for Data Storage",
	"tags": [],
	"description": "",
	"content": "Content:\nNavigate to S3 Console Configure Bucket Settings Create the Bucket Amazon S3 (Simple Storage Service) provides secure, durable, and scalable object storage. In this section, we\u0026rsquo;ll create an S3 bucket to store application data with proper security and versioning configurations.\n"
},
{
	"uri": "http://localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]