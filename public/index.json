[
{
	"uri": "http://localhost:4181/",
	"title": "Setting up an AWS account",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview In this first lab, you will be creating your new AWS account and use Multi-factor Authentication (MFA) to improve your account security. Next, you will create an Administrator Group and Admin User to manage access to resources in your account instead of using the root user. Finally, we will step through account authentication with AWS Support in the event you experience authentication problems.\nAWS Account An AWS account is the basic container for all the AWS resources you can create as an AWS customer. By default, each AWS account will have a root user. The root user has full access within your AWS account, and root user permissions cannot be limited. When you first create your AWS account, you will be assessing it as the root user.\nAs a best practice, do not use the AWS account root user for any task where it\u0026rsquo;s not required. Instead, create a new IAM user for each person that requires administrator access. Thereafter, the users in the administrators user group should set up the user groups, users, and so on, for the AWS account. All future interaction should be through the AWS account\u0026rsquo;s users and their own keys instead of the root user. However, to perform some account and service management tasks, you must log in using the root user credentials.\nMulti-Factor Authentication (MFA) MFA adds extra security because it requires users to provide unique authentication from an AWS supported MFA mechanism in addition to their regular sign-in credentials when they access AWS websites or services.\nIAM User Group An IAM user group is a collection of IAM users. User groups let you specify permissions for multiple users, which can make it easier to manage the permissions for those users. Any user in that user group automatically has the permissions that are assigned to the user group.\nIAM User An IAM user is an entity that you create in AWS to represent the person or application that uses it to interact with AWS. A user in AWS consists of a name and credentials. Please note that an IAM user with administrator permissions is not the same thing as the AWS account root user.\nAWS Support AWS Basic Support offers all AWS customers access to our Resource Center, Service Health Dashboard, Product FAQs, Discussion Forums, and Support for Health Checks â€“ at no additional charge. Customers who desire a deeper level of support can subscribe to AWS Support at the Developer, Business, or Enterprise level.\nCustomers who choose AWS Support gain one-on-one, fast-response support from AWS engineers. The service helps customers use AWS\u0026rsquo;s products and features. With pay-by-the-month pricing and unlimited support cases, customers are freed from long-term commitments. Customers with operational issues or technical questions can contact a team of support engineers and receive predictable response times and personalized support.\nMain Content Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication "
},
{
	"uri": "http://localhost:4181/2-mfa-setup-for-aws-user-root/1-virtual-mfa-device/",
	"title": "Setting Up the IAM Identity Center",
	"tags": [],
	"description": "",
	"content": "Start up the IAM Identity Center (If you already have a profile, attach the AmplifyBackendDeployFullAccess managed policy to your IAM user)\nOpen AWS Console to access IAM Identity Center and choose Enable.\nAfterward, a pop up will open, select Enable with AWS Organizations and choose Continue.\nAnd the basics for IAM Identity Center is ready.\nUsing CloudShell to set up the management. We will now using CloudShell to connect our mail account as the main profile for the project.\nOpen CloudShell terminal within the website and paste this line of code, then enter your email address after the prompt.\nread -p \u0026#34;Enter email address: \u0026#34; user_email # hit enter Afterward, copy and paste the following command, it will show a warning due to the multiline nature, but just keep pasting anyway.\nresponse=$(aws sso-admin list-instances) ssoId=$(echo $response | jq \u0026#39;.Instances[0].IdentityStoreId\u0026#39; -r) ssoArn=$(echo $response | jq \u0026#39;.Instances[0].InstanceArn\u0026#39; -r) email_json=$(jq -n --arg email \u0026#34;$user_email\u0026#34; \u0026#39;{\u0026#34;Type\u0026#34;:\u0026#34;Work\u0026#34;,\u0026#34;Value\u0026#34;:$email}\u0026#39;) response=$(aws identitystore create-user --identity-store-id $ssoId --user-name amplify-admin --display-name \u0026#39;Amplify Admin\u0026#39; --name Formatted=string,FamilyName=Admin,GivenName=Amplify --emails \u0026#34;$email_json\u0026#34;) userId=$(echo $response | jq \u0026#39;.UserId\u0026#39; -r) response=$(aws sso-admin create-permission-set --name amplify-policy --instance-arn=$ssoArn --session-duration PT12H) permissionSetArn=$(echo $response | jq \u0026#39;.PermissionSet.PermissionSetArn\u0026#39; -r) aws sso-admin attach-managed-policy-to-permission-set --instance-arn $ssoArn --permission-set-arn $permissionSetArn --managed-policy-arn arn:aws:iam::aws:policy/service-role/AmplifyBackendDeployFullAccess accountId=$(aws sts get-caller-identity | jq \u0026#39;.Account\u0026#39; -r) aws sso-admin create-account-assignment --instance-arn $ssoArn --target-id $accountId --target-type AWS_ACCOUNT --permission-set-arn $permissionSetArn --principal-type USER --principal-id $userId Hit enter\nTo validate that this worked, run the following command in the CloudShell:\nYou should see something like: Start session url: https://d-XXXXXXXXXX.awsapps.com/start Region: Username: amplify-admin\nFinish the setup for "
},
{
	"uri": "http://localhost:4181/1-create-new-aws-account/",
	"title": "Setting Up the template for the Workshop",
	"tags": [],
	"description": "",
	"content": "Content:\nSetting up Vite Setting up Git and push to Github Setting Up Amplify into the project Setting Up Vite If you have installed Node Package Manager, then create the project using Vite. After setting up the Vite Website, start the development site. Test around to see if the website is stable. Setting up Git and push to Github When you have finished setting up Vite, install Git so you can import on GitHub.\nOnce you have installed Git, commit the workshop you have made up on Github.\nDo remember to save the progress once in a while. Setting Up Amplify into the project Intialize AWS Amplify in the project by using npm. Update the file directory, this file will contain all the configurations. Remember to commit into GitHub. "
},
{
	"uri": "http://localhost:4181/1-create-new-aws-account/1.1-find-account-id/",
	"title": "Setting Up Vite",
	"tags": [],
	"description": "",
	"content": "Set Up The Vite, React and TypeScript To kick off the development environment, we initialized the project with Vite, a next-generation frontend tooling system that offers fast build times and hot module replacement (HMR). We selected the React + TypeScript template to simplify development with type safety and modern React features.\nCreate the project using Vite Create a new project by making a new folder and direct to it inside the Visual Studio Code. After the folder is created, use this command:\nnpm create vite@latest leftover -- --template react-ts -y This command scaffolds a new Vite project named leftover with the React + TypeScript template.\nNavigate and run the development template Navigate towards the folder that you just created with this command.\ncd leftover Then, to run the program after being set up.\nnpm run dev Result Once the server is running, the development version of the application becomes accessible at: http://localhost:5173\nThe successful launch displays a default welcome screen with the Vite + React logo, a counter button, and instructions to test hot module replacement by editing the src/App.tsx file.\n"
},
{
	"uri": "http://localhost:4181/1-create-new-aws-account/1.2-update-account/",
	"title": "Initialize Git and Push Project to GitHub",
	"tags": [],
	"description": "",
	"content": "Setting up Git and Push After setting up the local Vite + React + TypeScript project, the next step was to version control the project and push it to a remote GitHub repository named AWS-leftover.\nCreate a GitHub respository for the workshop We will need to publish our Workshop so that the services on AWS such as Amplify can access, henceforth, a GitHub account is necessary. Prepare yourself a GitHub account. Once you are ready, in your profile, click on New.\nName the respository as leftover.\nOnce you are finished with the creation, you should see the link that will connect you to your project.\nNote: Do remember that your GitHub link is private and it should only come from your GitHub profile, so we have to censor it for security and privacy reasons.\nIntialize Git into the project. Minimum Permissions: To proceed with the following steps, you will need to follow these steps:\nFirst, open up a new bash terminal and direct Git towards the project root directory:\ngit init Then, select all the files that you want to update to your repository. In this case, it will be:\ngit add . You will need to create an intial commit as well.\ngit commit -m \u0026#34;first commit\u0026#34; You will need to link your local repository to Github after that:\ngit remote add origin https://github.com/*\u0026lt;your-username\u0026gt;*/leftover.git Replace with your actual GitHub username.\nThen, you will set the branch to main.\ngit branch -M main Finally, you will need to push the project up to Github.\ngit push -u origin main Once completed, the project is hosted remotely and can be accessed, shared, or collaborated on via GitHub.\nNote: \u0026ldquo;git add .\u0026rdquo;, \u0026ldquo;git commit -m\u0026rdquo; and \u0026ldquo;git push\u0026rdquo; will be your way to save and publish your progress onto the repository.\nResult The screenshot below shows the successfully initialized GitHub repository with the project directory and supporting files committed.\n"
},
{
	"uri": "http://localhost:4181/2-mfa-setup-for-aws-user-root/2-u2f-security-key/",
	"title": "U2F Security Key",
	"tags": [],
	"description": "",
	"content": "Content\nEnable U2F security key via Console If you do not have a hardware device, you can skip the steps below.\nEnable U2F security key via Console U2F Security Key is an open authentication protocol that allows users to access online services with a unique security key without using any software.\nSign in to the AWS Console.\nIn the upper right corner, you will see your account name, select and select My Security Credentials then expand Multi-factor authentication (MFA).\nTo manage U2F security keys, you must have permissions from the following set of permissions. in the left sidebar, select Policies then select Create policy, select JSON tab and paste the below:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowManageOwnUserMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:DeactivateMFADevice\u0026#34;, \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;DenyAllExceptListedIfNoMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;, \u0026#34;NotAction\u0026#34;: [ \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;BoolIfExists\u0026#34;: { \u0026#34;aws:MultiFactorAuthPresent\u0026#34;: \u0026#34;false\u0026#34; } } } ] } Select Next: Tags. This is a screen of Tags, a tool used to differentiate AWS resources. Select Next: Review. This is the screen that allows you to review the permission set you are creating. Enter the permission set name (eg MFAHardDevice) and select Create policy. In the left sidebar, select Dashboard and then select Enable MFA. Expand Multi-factor authentication (MFA) then select Active MFA.\nIn Manage MFA Device, select U2F security key then press Continue.\nPlug the U2F security key into the computer\u0026rsquo;s USB port.\nClick the U2F security key, and then select Close when U2F is successfully set up. "
},
{
	"uri": "http://localhost:4181/2-mfa-setup-for-aws-user-root/",
	"title": "Working on the main Functionality of the project using AWS Services",
	"tags": [],
	"description": "",
	"content": "Content Content Setting Up the IAM Identity Center Deploy the Application via AWS Amplify Setting up the Frontend, Backend and AWS Sandbox Setting up AWS Bedrock Model (2 Ways) Setting Up the IAM Identity Center In order to manage multiple accounts with Single-sign on (SSO) session, users, groups, permission sets, and more for your organization, you have to set up the IAM Identity Center.\nOpen AWS Console to access IAM Identity Center and enable the process.\nOpen CloudShell and set up the management for the AWS Services using your root email as the main profile for the project.\nConfigure the account by changing the password and finish setting up the new account and signing in.\nDeploy the Application via AWS Amplify After initializing Amplify and enabling IAM Identity Center in the project, the application was deployed using AWS Amplifyâ€™s hosting feature, which supports seamless integration with GitHub for CI/CD.\nConnect and Deploy AWS Amplify with the Repository from your GitHub.\nEdit the Build specification in the Amplify file.\nSave and Redeploy the App.\nSetting up the Frontend, Backend and AWS Sandbox You will need to set up the frontend, back and the aws sandbox following these steps.\nFrontend and Backend Install the libraries necessary using npm inside the local repository for AWS Amplify and update the following files:\nsrc/index.css (For Frontend) src/App.css (For Frontend) src/main.tsx (For UI) src/App.tsx (For UI) Set up the resources file for Amplify Data by creating the file:\namplify/data/resource.ts Amplify Sandbox Using npm to install Amplify Sandbox.\nAfter setting up, you will need to configure a profile inside the sandbox.\nConfigure and make a localhost.\nSetting up AWS Bedrock Model (2 Ways) You will be using Bedrock Model and setting up using Claude Sonnet.\nThere will be two ways to build the Bedrock Model based on how you intepret.\nImplementing the servers using manual coding for a fallback server. Using cross-region to make a fallback server. "
},
{
	"uri": "http://localhost:4181/3-create-admin-user-and-group/",
	"title": "Create Admin Group and Admin User",
	"tags": [],
	"description": "",
	"content": "Creating an Admin Group Log in to the Control Panel on the AWS Web Service page.\nClick on your account name at the top right corner and select My Security Credentials.\nNote: If you don\u0026rsquo;t see the My Security Credentials menu, you can click on the search icon and type IAM. Then click on the IAM service to access the IAM management interface.\nOn the left sidebar, choose User Groups, and then select Create Group.\nUnder the Name the group section, enter the Group name (For example: AdminGroup), and scroll down.\nIn the Attach permissions policies section, type AdministratorAccess in the search bar and select it. Finally, click on Create Group.\nThe creation of the admin group is complete.\nCreate Admin User You can use the AWS Management Console to create IAM users.\nFollow the sign-in procedure appropriate to your user type as described in the topic How to sign in to AWS in the AWS Sign-In User Guide.\nOn the Console Home page, select the IAM service.\nIn the navigation pane, select Users, and then select Add users.\nOn the Specify user details page, under User details, enter the new user\u0026rsquo;s name in the User name field. This will be their sign-in name for AWS.\nNote: User names can be up to 64 letters, digits, and certain characters: plus (+), equal (=), comma (,), period (.), at sign (@), underscore (_), and hyphen (-). User names must be unique within an account, and they are case-sensitive when used in policies or ARNs. However, they are case-insensitive during the sign-in process.\nSelect Provide user access to the AWS Management Console. This generates AWS Management Console sign-in credentials for the new user.\nYou\u0026rsquo;ll be asked whether you\u0026rsquo;re providing console access to a person. It\u0026rsquo;s recommended to create users in IAM Identity Center rather than IAM. To switch to creating the user in IAM Identity Center, select Specify a user in Identity Center.\nIf IAM Identity Center is not enabled, this option takes you to the service page in the console to enable it. If IAM Identity Center is enabled, this option takes you to the Specify user details page in IAM Identity Center. If you cannot use IAM Identity Center, select I want to create an IAM user and continue following this procedure.\nFor Console password, choose one of the following:\nAutogenerated password: The user gets a randomly generated password that adheres to the account password policy. You can view or download the password on the Retrieve password page. Custom password: Assign a password that you enter in the box. Optionally, select Users must create a new password at next sign-in (recommended) to ensure the user changes their password the first time they sign in.\nSelect Next.\nOn the Set permissions page, choose how to assign permissions for this user:\nAdd user to group: Assign the user to one or more groups with existing permissions policies. Copy permissions: Copy permissions from an existing user with similar needs. Attach policies directly: Attach AWS managed or custom policies directly to the user. It\u0026rsquo;s recommended to attach policies to groups whenever possible.\nOptionally, set a permissions boundary in the Permissions boundary section. This is an advanced feature that controls maximum permissions.\nSelect Next.\nOptionally, on the Review and create page, under Tags, you can attach metadata to the user using key-value pairs.\nReview your choices, and when ready, select Create user.\nOn the Retrieve password page, get the password assigned to the user:\nSelect Show next to the password to view it manually.\nSelect Download .csv to save the user\u0026rsquo;s sign-in credentials as a .csv file.\nSelect Email sign-in instructions to customize and send an email to the user. The email includes their user name and a URL to the account sign-in page:\nUser name\rURL: https://AWS-account-ID-or-alias.signin.aws.amazon.com/console Note: The user\u0026rsquo;s password is not included in the email.\nIf the user also requires access keys, refer to Managing access keys for IAM users.\nLogin to AdminUser Return to the IAM service, and select Users in the left sidebar. Click on the name of the IAM User you just selected. In the Summary section, select the Security credentials tab. Look at the line Summary: Console sign-in link and copy the link next to it. This is the link you use to log in to the IAM User. Open an incognito tab of the browser you are using and paste the link into the search bar. Incognito tab login allows you to log in to AWS with an IAM User without having to log out of the root user in the main tab.\nEnter the correct IAM User name and password that you entered in the create IAM User section above. Click sign in. Congratulations, you have successfully accessed your account as an IAM User AdminUser. In The next step, we will switch to using IAM Role to improve the security of your account. Creating Access Key for AWS Root User Minimum Required Permissions To perform the following steps, you need at least the following IAM (Identity and Access Management) permissions:\nYou must log in as the root user of AWS, which does not require any additional IAM permissions. These steps cannot be performed as an IAM user or a role.\nUse the email address and password of your AWS account to sign in to the AWS Management Console as the root user.\nIn the top-right corner of the console, select your account name or number, then choose \u0026ldquo;Security Credentials\u0026rdquo;.\nUnder \u0026ldquo;Access keys,\u0026rdquo; select \u0026ldquo;Create access key.\u0026rdquo; If this option is unavailable, it means you have the maximum number of access keys. You must delete one of the existing access keys before creating a new one. For more information, see IAM Object Quotas in the IAM User Guide.\nOn the \u0026ldquo;Alternatives to root user access keys\u0026rdquo; page, consider security recommendations. To proceed, check the box and then select \u0026ldquo;Create access key.\u0026rdquo;\nOn the \u0026ldquo;Retrieve access key\u0026rdquo; page, your Access Key ID will be displayed.\nUnder the \u0026ldquo;Secret access key\u0026rdquo; section, select \u0026ldquo;Show,\u0026rdquo; then copy the Access Key ID and Secret Key from your browser window and paste them into a secure location. Alternatively, you can select \u0026ldquo;Download .csv file\u0026rdquo; to download a file named \u0026ldquo;rootkey.csv\u0026rdquo; containing the Access Key ID and Secret Key. Keep the file in a secure location.\nSelect \u0026ldquo;Done.\u0026rdquo; When you no longer need the access key, we recommend either deleting it or at least considering disabling it to prevent misuse.\nNote: These steps apply only to the root user account on AWS. For IAM users or roles, the process of creating and managing access keys may differ.\nRevoking Access Key for Root User on AWS Minimum Permissions To perform the following steps, you must have at least the following IAM (Identity and Access Management) permissions:\nYou must be logged in as the root user of your AWS account, this does not require any additional AWS Identity and Access Management (IAM) permissions. You cannot perform these steps as an IAM user or a role. Use the email address and password of your AWS account to sign in to the AWS Management Console as the root user. In the top-right corner of the console, select your account name or number, then choose Security Credentials. Under Access keys, select the access key you wish to delete, then in the Actions section, choose Delete. Note Alternatively, you can choose to Deactivate an access key instead of permanently deleting it. This allows you to continue using it in the future without changing both the key ID and secret key. While the key is deactivated, any requests using it in AWS API requests will fail with an \u0026ldquo;access denied\u0026rdquo; error.\nIn the Delete dialog, select Deactivate, enter the access key ID to confirm your intention to delete it, then choose Delete.\n"
},
{
	"uri": "http://localhost:4181/2-mfa-setup-for-aws-user-root/3-other-hardware-mfa-device/",
	"title": "Hard MFA Device",
	"tags": [],
	"description": "",
	"content": "Content\nEnable other hardware MFA device through the Console Enable other hardware MFA device through the Console Sign in to the AWS Console. In the upper right corner, you will see your account name, select and select My Security Credentials then expand Multi-factor authentication (MFA). To manage U2F security keys, you must have permissions from the following set of permissions. in the left sidebar, select Policies then select Create policy, select JSON tab and paste the below: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowManageOwnUserMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:DeactivateMFADevice\u0026#34;, \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;DenyAllExceptListedIfNoMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;, \u0026#34;NotAction\u0026#34;: [ \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;BoolIfExists\u0026#34;: { \u0026#34;aws:MultiFactorAuthPresent\u0026#34;: \u0026#34;false\u0026#34; } } } ] } Select Next: Tags. This is a screen of Tags, a tool used to differentiate AWS resources. Select Next: Review. This is the screen that allows you to review the permission set you are creating. Enter the permission set name (eg MFAHardDevice) and select Create policy. In the left sidebar, select Dashboard and then select Enable MFA. Expand Multi-factor authentication (MFA) then select Active MFA.\nIn Manage MFA Device, select Other Hardware MFA Device then click Continue.\nEnter Serial Number on the back of the device.\nEnter MFA code 1 then wait 30 seconds and enter MFA code 2. Select Assign MFA. "
},
{
	"uri": "http://localhost:4181/1-create-new-aws-account/1.3-aws-account-alias/",
	"title": "Setting Up Amplify For The Project",
	"tags": [],
	"description": "",
	"content": "Intializing Amplify in the project First, you will need to use the npm command:\nnpm create amplify@latest -y\nThis command sets up a minimal Amplify project, preparing the application for AWS resource integration.\nProject Structure Update and Version Control Reminder Upon successful execution, an amplify/ directory is generated in the root folder of the project. This directory contains all configurations and backend environment settings related to Amplify.\nAfter this change, remember to commit and push the updates to the GitHub repository:\ngit add . git commit -m \u0026ldquo;Add AWS Amplify setup\u0026rdquo; git push\nResults The screenshot below highlights the newly added amplify folder in the project directory, confirming successful initialization.\n"
},
{
	"uri": "http://localhost:4181/4-verify-new-account/",
	"title": "Account Authentication Support",
	"tags": [],
	"description": "",
	"content": "Content:\nCheck the information Create a support case with AWS Support During the AWS account creation process, at the contact phone number verification step, sometimes there will be a situation where no SMS or calls from AWS will be received. In that case, follow these steps to complete the account information verification:\nCheck the information First, double-check your account information and make sure it\u0026rsquo;s entered correctly:\nYou have entered the phone number information and selected the correct international area code to receive the call. If you use a mobile phone, check your phone to make sure you are still within range to receive calls. Payment method information has been entered correctly. Make sure that the phone number you provide in your AWS account is reachable.\nCreate a support case with AWS Support After checking that the information is correct but still has not received the verification call, AWS Support will assist you to activate your account manually.\nGo to the AWS Support console, select Create case. Select Account and billing support and enter the support information: Type: select Account. Category: select Activation. Subject: briefly write down your situation (eg Did not receive an SMS message or call for verification) Description: Provide details of the situation encountered and information about the time you need support to activate the account. Attachments: Attach an image describing the authentication step you are facing. Under Contact options, select Chat under Contact methods. Select Submit. 5. The AWS Support team will contact and assist in activating your account.\nYou can create a support request with AWS Support even if your account is not activated.\n"
},
{
	"uri": "http://localhost:4181/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:4181/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]